{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPm8fqcX+0HXESKSMCsX0oH"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "source": [
        "import os, sys, json, time, glob, threading\n",
        "from datetime import datetime\n",
        "from pathlib import Path\n",
        "import serial\n",
        "from typing import Dict, Any, Optional\n",
        "\n",
        "# --- Settings ---\n",
        "STATIC_PORTS = [\n",
        "    \"/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_B0012UVW-if00-port0\",\n",
        "    \"/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_B0012SAU-if00-port0\",\n",
        "]\n",
        "BAUD = 115200\n",
        "LOG_DIR = Path(\"/home/pi/weight_logs\")\n",
        "LOG_DIR.mkdir(parents=True, exist_ok=True)\n",
        "\n",
        "PORT_ALIAS = {\n",
        "    \"/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_B0012UVW-if00-port0\": \"Arduino A\",\n",
        "    \"/dev/serial/by-id/usb-FTDI_FT232R_USB_UART_B0012SAU-if00-port0\": \"Arduino B\",\n",
        "}\n",
        "CAL_STORE_PATH = Path(\"/home/pi/cal_store.json\")\n",
        "\n",
        "# --- Global variables and locks ---\n",
        "g_latest_seat_data: Dict[str, Dict[str, Any]] = {}\n",
        "g_data_lock = threading.Lock()\n",
        "\n",
        "# --- Utils ---\n",
        "def load_cal_store():\n",
        "    if CAL_STORE_PATH.exists():\n",
        "        try: return json.loads(CAL_STORE_PATH.read_text(encoding=\"utf-8\"))\n",
        "        except Exception: pass\n",
        "    return {}\n",
        "\n",
        "def save_cal_store(store: dict):\n",
        "    tmp = CAL_STORE_PATH.with_suffix(\".json.tmp\")\n",
        "    tmp.write_text(json.dumps(store, ensure_ascii=False, indent=2), encoding=\"utf-8\")\n",
        "    tmp.replace(CAL_STORE_PATH)\n",
        "\n",
        "def now_utc():\n",
        "    return datetime.utcnow().isoformat() + \"Z\"\n",
        "\n",
        "def open_serial(port):\n",
        "    \"\"\"Opens the serial port. (Retries every 1s until connected)\"\"\"\n",
        "    while True:\n",
        "        try:\n",
        "            # Increase timeout slightly for command sending robustness\n",
        "            return serial.Serial(port, BAUD, timeout=2)\n",
        "        except serial.SerialException as e:\n",
        "            # If port is busy (e.g., reader thread has it), wait and retry\n",
        "            if \"Resource busy\" in str(e):\n",
        "                # print(f\"Port {port} busy, retrying...\") # Optional debug print\n",
        "                time.sleep(0.5)\n",
        "            else:\n",
        "                # print(f\"Error opening {port}: {e}, retrying...\") # Optional debug print\n",
        "                time.sleep(1)\n",
        "        except Exception as e:\n",
        "            # print(f\"Unexpected error opening {port}: {e}, retrying...\") # Optional debug print\n",
        "            time.sleep(1)\n",
        "\n",
        "\n",
        "# --- Reader Thread ---\n",
        "def reader(port):\n",
        "    \"\"\"\n",
        "    Runs as a background thread, continuously receiving data from Arduino\n",
        "    and updating the g_latest_seat_data global variable.\n",
        "    \"\"\"\n",
        "    alias = PORT_ALIAS.get(port, Path(port).name)\n",
        "    log_path = LOG_DIR / (port.replace(\"/\", \"_\") + \".ndjson\")\n",
        "    # Initialize ser outside the loop\n",
        "    ser = None\n",
        "    while ser is None: # Keep trying until port opens\n",
        "        try:\n",
        "            ser = serial.Serial(port, BAUD, timeout=1)\n",
        "            print(f\"[{alias}] Serial port opened successfully.\")\n",
        "        except serial.SerialException as e:\n",
        "             print(f\"[{alias}] Failed to open serial port: {e}. Retrying in 2s...\")\n",
        "             time.sleep(2)\n",
        "        except Exception as e:\n",
        "            print(f\"[{alias}] Unexpected error opening serial port: {e}. Retrying in 2s...\")\n",
        "            time.sleep(2)\n",
        "\n",
        "\n",
        "    # Auto-reapply 'set_cal'\n",
        "    try:\n",
        "        store = load_cal_store()\n",
        "        cal_data = store.get(alias)\n",
        "        if cal_data and \"cal\" in cal_data:\n",
        "            cal_val = cal_data[\"cal\"]\n",
        "            cmd = {\"cmd\": \"set_cal\", \"value\": cal_val}\n",
        "            ser.write((json.dumps(cmd) + \"\\n\").encode(\"utf-8\"))\n",
        "            ser.flush()\n",
        "    except Exception as e:\n",
        "        print(f\"[{alias}] Error reapplying set_cal: {e}\") # Show error\n",
        "\n",
        "    last_print = 0\n",
        "    with open(log_path, \"a\") as fout:\n",
        "        while True:\n",
        "            try:\n",
        "                line = ser.readline().decode(\"utf-8\", errors=\"ignore\").strip()\n",
        "                if not line: continue\n",
        "                try: data = json.loads(line)\n",
        "                except Exception: continue\n",
        "\n",
        "                data[\"_recv_ts\"] = now_utc()\n",
        "                data[\"_alias\"] = alias\n",
        "                data[\"_port\"] = port\n",
        "\n",
        "                seats_data_in_json = data.get(\"seats\", [])\n",
        "                if seats_data_in_json:\n",
        "                    with g_data_lock:\n",
        "                        for s in seats_data_in_json:\n",
        "                            seat_name = s.get(\"name\")\n",
        "                            if seat_name:\n",
        "                                g_latest_seat_data[seat_name] = {\n",
        "                                    \"Weight\": float(s.get(\"Weight\", 0.0)),\n",
        "                                    \"mpu_g\": float(s.get(\"mpu_g\", 0.0)),\n",
        "                                    \"_recv_ts_utc\": data.get(\"_recv_ts\")\n",
        "                                }\n",
        "\n",
        "                fout.write(json.dumps(data) + \"\\n\")\n",
        "                fout.flush()\n",
        "\n",
        "            except serial.SerialException as e:\n",
        "                print(f\"[{alias}] Serial error: {e}. Reopening port...\") # Show error\n",
        "                try: ser.close()\n",
        "                except: pass\n",
        "                ser = None\n",
        "                while ser is None: # Keep trying until port reopens\n",
        "                    try:\n",
        "                        ser = serial.Serial(port, BAUD, timeout=1)\n",
        "                        print(f\"[{alias}] Serial port reopened successfully.\")\n",
        "                        # Reapply 'set_cal' on reconnect\n",
        "                        try:\n",
        "                            store = load_cal_store()\n",
        "                            cal_data = store.get(alias)\n",
        "                            if cal_data and \"cal\" in cal_data:\n",
        "                                cal_val = cal_data[\"cal\"]\n",
        "                                cmd = {\"cmd\": \"set_cal\", \"value\": cal_val}\n",
        "                                ser.write((json.dumps(cmd) + \"\\n\").encode(\"utf-8\"))\n",
        "                                ser.flush()\n",
        "                        except Exception as e2:\n",
        "                             print(f\"[{alias}] Error reapplying set_cal after reconnect: {e2}\") # Show error\n",
        "                    except serial.SerialException as e_reopen:\n",
        "                         print(f\"[{alias}] Failed to reopen serial port: {e_reopen}. Retrying in 2s...\")\n",
        "                         time.sleep(2)\n",
        "                    except Exception as e_reopen:\n",
        "                         print(f\"[{alias}] Unexpected error reopening serial port: {e_reopen}. Retrying in 2s...\")\n",
        "                         time.sleep(2)\n",
        "\n",
        "            except Exception as e:\n",
        "                print(f\"[{alias}] Unexpected error in reader loop: {e}\") # Show error\n",
        "                time.sleep(0.2)\n",
        "\n",
        "# --- Command Sending ---\n",
        "def send_cmd(port, obj):\n",
        "    \"\"\"Sends a JSON command to a specific port.\"\"\"\n",
        "    s = None\n",
        "    try:\n",
        "        # Use open_serial which handles retries and busy ports\n",
        "        s = open_serial(port)\n",
        "        if s and s.is_open:\n",
        "            s.write((json.dumps(obj) + \"\\n\").encode(\"utf-8\"))\n",
        "            s.flush()\n",
        "            print(f\"Command {obj} sent to {port}\") # Confirmation\n",
        "            s.close() # Close immediately after sending\n",
        "            return True\n",
        "        else:\n",
        "            print(f\"Failed to open port {port} to send command.\")\n",
        "            return False\n",
        "    except Exception as e:\n",
        "        print(f\"ERROR sending command {obj} to {PORT_ALIAS.get(port, port)}: {e}\")\n",
        "        if s and s.is_open:\n",
        "            s.close()\n",
        "        return False\n",
        "\n",
        "\n",
        "def send_tare_command_to_all():\n",
        "    \"\"\"Sends the 'tare' command to all connected Arduinos.\"\"\"\n",
        "    print(\"[get_arduino_data] Sending 'tare' command to all Arduinos...\")\n",
        "    tare_cmd = {\"cmd\": \"tare\"}\n",
        "    success_count = 0\n",
        "    total_ports = len(STATIC_PORTS)\n",
        "\n",
        "    for port in STATIC_PORTS:\n",
        "        if send_cmd(port, tare_cmd):\n",
        "            success_count += 1\n",
        "        # Add a small delay between commands if needed\n",
        "        time.sleep(0.2)\n",
        "\n",
        "    if success_count == total_ports:\n",
        "        print(\"[get_arduino_data] Tare command sent successfully to all Arduinos.\")\n",
        "        # Add a longer delay for Arduinos to process the tare\n",
        "        time.sleep(2.0)\n",
        "        print(\"[get_arduino_data] Assumed tare complete.\")\n",
        "    elif success_count > 0:\n",
        "        print(f\"[get_arduino_data] WARNING: Tare command sent to {success_count}/{total_ports} Arduinos.\")\n",
        "        time.sleep(2.0)\n",
        "    else:\n",
        "        print(\"[get_arduino_data] CRITICAL: Failed to send tare command to any Arduino.\")\n",
        "\n",
        "# --- Public Functions ---\n",
        "def start_reader_threads():\n",
        "    print(\"[get_arduino_data] Starting reader threads...\")\n",
        "    threads = []\n",
        "    for p in STATIC_PORTS:\n",
        "        t = threading.Thread(target=reader, args=(p,), daemon=True)\n",
        "        t.start()\n",
        "        threads.append(t)\n",
        "    if not threads:\n",
        "        print(\"[get_arduino_data] WARNING: No ports defined.\")\n",
        "    # Add a small delay to allow threads to start and potentially open ports\n",
        "    time.sleep(1.0)\n",
        "    return threads\n",
        "\n",
        "def get_latest_seat_data() -> Dict[str, Dict[str, Any]]:\n",
        "    with g_data_lock:\n",
        "        return g_latest_seat_data.copy()\n",
        "\n",
        "# --- Main (for CLI tool) ---\n",
        "def main():\n",
        "    if len(sys.argv) == 4 and sys.argv[1] == \"set_cal\":\n",
        "        try:\n",
        "            alias = sys.argv[2]\n",
        "            cal_val = float(sys.argv[3])\n",
        "            port_to_use = None\n",
        "            for p, a in PORT_ALIAS.items():\n",
        "                if a == alias:\n",
        "                    port_to_use = p\n",
        "                    break\n",
        "            if not port_to_use:\n",
        "                print(f\"Error: Alias '{alias}' not found.\")\n",
        "                return\n",
        "            if send_cmd(port_to_use, {\"cmd\": \"set_cal\", \"value\": cal_val}):\n",
        "                store = load_cal_store()\n",
        "                store.setdefault(alias, {})[\"cal\"] = cal_val\n",
        "                store[alias][\"updated_at\"] = int(time.time())\n",
        "                save_cal_store(store)\n",
        "                print(f\"Successfully set_cal {cal_val} for {alias} and saved.\")\n",
        "            else:\n",
        "                 print(f\"Failed to send set_cal command for {alias}.\")\n",
        "        except Exception as e:\n",
        "            print(f\"Error processing set_cal: {e}\")\n",
        "        return\n",
        "    elif len(sys.argv) > 1:\n",
        "        print(f\"Unknown command: {' '.join(sys.argv[1:])}\")\n",
        "        return\n",
        "\n",
        "    # === \"Service Mode\" ===\n",
        "    print(\"[get_arduino_data] Running in Service Mode (for testing reader threads).\")\n",
        "    start_reader_threads()\n",
        "    print(\"Reading... (Ctrl+C to stop)\")\n",
        "    try:\n",
        "        while True: time.sleep(1)\n",
        "    except KeyboardInterrupt:\n",
        "        print(\"\\nBye!\")\n",
        "        pass\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()"
      ],
      "metadata": {
        "id": "vkrOU4YNE4YO"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}