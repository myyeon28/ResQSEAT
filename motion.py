# -*- coding: utf-8 -*-
"""motion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pgn_IvTGe6JNCxDD1dbAagpH6nfTfG0X
"""

# motion.py

import cv2
import numpy as np
import time
import platform

WIDTH, HEIGHT = 640, 480
BLUR_KSIZE = (5, 5)
DIFF_THRESH = 25
DILATE_ITERS = 2
MOTION_RATIO = 0.05
RUN_DURATION = 10.0
WARMUP_SECONDS = 2.0

def open_camera(index=0):
    system = platform.system().lower()
    if "windows" in system:
        cap = cv2.VideoCapture(index, cv2.CAP_DSHOW)
    elif "linux" in system:
        cap = cv2.VideoCapture(index, cv2.CAP_V4L2)
        try:
            cap.set(cv2.CAP_PROP_FOURCC, cv2.VideoWriter_fourcc(*"MJPG"))
            cap.set(cv2.CAP_PROP_BUFFERSIZE, 1)
        except Exception:
            pass
    else:
        cap = cv2.VideoCapture(index)
    return cap

def motion_result():
    cap = open_camera(0)
    if not cap.isOpened():
        print("[motion.py WARN] Failed to open camera.")
        return (1, 1, 1, 1)

    prev_gray = None
    motion_ever_detected = [False, False, False, False]
    labels = ["S4", "S3", "S2", "S1"]

    mid_x, mid_y = WIDTH // 2, HEIGHT // 2
    rois = [
        (0, 0, mid_x, mid_y), (mid_x, 0, WIDTH, mid_y),
        (0, mid_y, mid_x, HEIGHT), (mid_x, mid_y, WIDTH, HEIGHT),
    ]

    script_start_time = time.monotonic()
    detection_start_time = None

    print(f"[{time.strftime('%H:%M:%S')}] Motion Check module starting: {WARMUP_SECONDS}s stabilization...")

    while True:
        ok, frame = cap.read()
        if not ok:
            print("[motion.py WARN] Failed to read frame.")
            break

        frame = cv2.resize(frame, (WIDTH, HEIGHT))
        gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
        gray = cv2.GaussianBlur(gray, BLUR_KSIZE, 0)
        now = time.monotonic()

        vis = frame.copy()

        if detection_start_time is None:
            if (now - script_start_time) < WARMUP_SECONDS:
                prev_gray = gray

                warmup_text = f"Stabilizing... {now - script_start_time:.1f}s"
                cv2.putText(vis, warmup_text, (10, 30),
                            cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 255), 2)

                time.sleep(0.01)
                continue
            else:
                print(f"[{time.strftime('%H:%M:%S')}] Stabilization complete. Starting {RUN_DURATION}s detection.")
                detection_start_time = now
                prev_gray = gray

        elapsed = now - detection_start_time

        diff = cv2.absdiff(prev_gray, gray)
        _, mask = cv2.threshold(diff, DIFF_THRESH, 255, cv2.THRESH_BINARY)
        mask = cv2.dilate(mask, None, iterations=DILATE_ITERS)

        for i, (x1, y1, x2, y2) in enumerate(rois):
            roi_mask = mask[y1:y2, x1:x2]
            area = roi_mask.size
            if area > 0:
                white = cv2.countNonZero(roi_mask)
                motion_pct = white / float(area)
            else:
                motion_pct = 0

            if motion_pct >= MOTION_RATIO:
                motion_ever_detected[i] = True

        cv2.line(vis, (mid_x, 0), (mid_x, HEIGHT), (0, 255, 255), 2)
        cv2.line(vis, (0, mid_y), (WIDTH, mid_y), (0, 255, 255), 2)

        for i, (x1, y1, x2, y2) in enumerate(rois):
            cv2.putText(vis, labels[i], (x1 + 10, y1 + 25), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 255), 2)
            status_text = "MOVED" if motion_ever_detected[i] else "STATIC"
            color = (0, 255, 0) if motion_ever_detected[i] else (0, 0, 255)
            cv2.putText(vis, status_text, (x1 + 10, y1 + 50), cv2.FONT_HERSHEY_SIMPLEX, 0.6, color, 2)

        timer_text = f"DETECTING: {elapsed:.1f}s / {RUN_DURATION:.1f}s"
        cv2.putText(vis, timer_text, (10, HEIGHT - 20), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

        cv2.imshow("Motion Check", vis)

        prev_gray = gray

        key = cv2.waitKey(1) & 0xFF
        if key == ord('q'):
            print("[WARN] User manually quit")
            break

        if elapsed >= RUN_DURATION:
            print(f"[{time.strftime('%H:%M:%S')}] {RUN_DURATION}s detection complete.")
            break

    cap.release()
    try:
        cv2.destroyWindow("Motion Check")
    except cv2.error:
        pass

    S4_UC = int(not motion_ever_detected[0])
    S3_UC = int(not motion_ever_detected[1])
    S2_UC = int(not motion_ever_detected[2])
    S1_UC = int(not motion_ever_detected[3])

    return (S1_UC, S2_UC, S3_UC, S4_UC)

if __name__ == "__main__":
    print("Running motion.py directly (Test Mode)")
    s1, s2, s3, s4 = motion_result()
    print("\n--- Motion Analysis Final Results (0=Conscious, 1=Unconscious) ---")
    print(f"S1_UC: {s1}")
    print(f"S2_UC: {s2}")
    print(f"S3_UC: {s3}")
    print(f"S4_UC: {s4}")

    print("Test complete. Press any key in window to exit.")
    try:
        cv2.waitKey(0)
        cv2.destroyAllWindows()
    except:
        pass