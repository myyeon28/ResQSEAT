# -*- coding: utf-8 -*-
"""main

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pgn_IvTGe6JNCxDD1dbAagpH6nfTfG0X
"""

#main.py

import threading
import time
import json
import requests
from typing import Tuple, Dict, Any

try:
    from get_arduino_data import start_reader_threads, get_latest_seat_data, send_tare_command_to_all
    import age
    import seat_status
    import accident_flag
    import motion
    import impact_score
    import jsondata
    import capture
except ImportError as e:
    print(f"CRITICAL ERROR: Failed to import module. {e}")
    print("Please ensure all .py files are in the same directory.")
    exit(1)

SERVER_BASE_URL = "http://127.0.0.1:5000"
POST_ACCIDENT_WAIT_S = 5.0

def main():

    print(f"[{time.strftime('%H:%M:%S')}] [Main] --- System Ignition ---")
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Starting Arduino data readers (Thread-1)...")
    start_reader_threads()

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Waiting for initial sensor data...")
    while not get_latest_seat_data():
        time.sleep(0.2)
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Initial sensor data received.")


    print("\n" + "="*50)
    input("IMPORTANT: Ensure all seats are EMPTY, then press Enter to calibrate weights...")
    send_tare_command_to_all()
    print("="*50 + "\n")

    input("Please have occupants take their seats, then press Enter to start monitoring...")
    print("="*50 + "\n")

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Starting initial {age.RUN_DURATION}s age analysis...")
    initial_ages = age.age_result()
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Initial age analysis complete: {initial_ages}")

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Performing initial seat status check...")
    current_arduino_data = get_latest_seat_data()
    initial_sits = seat_status.get_seat_status(initial_ages, current_arduino_data)
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Initial sit status determined: {initial_sits}")

    print(f"[{time.strftime('%H:%M:%S')}] [Main] === SYSTEM ARMED ===\n[{time.strftime('%H:%M:%S')}] [Main] Waiting for accident trigger...")

    trigger_data = accident_flag.wait_accident_flag()

    if not trigger_data:
        print(f"[{time.strftime('%H:%M:%S')}] [Main] wait_accident_flag returned None (timeout?). Exiting.")
        return

    print(f"\n[{time.strftime('%H:%M:%S')}] [Main] !!! === ACCIDENT DETECTED === !!!")

    final_ages = initial_ages
    final_sits = initial_sits

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Impact Data: {trigger_data}")
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Occupant Age (at startup): {final_ages}")
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Occupant Sit (at startup): {final_sits}")

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Waiting {POST_ACCIDENT_WAIT_S}s for stabilization...")
    time.sleep(POST_ACCIDENT_WAIT_S)

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Starting post-accident motion analysis...")
    final_uc = motion.motion_result()
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Motion analysis complete. UC Status: {final_uc}")

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Calculating impact scores...")
    final_impacts = impact_score.calculate_impact_scores(trigger_data)
    print(f"[{time.strftime('%H:%M:%S')}] [Main] Impact scores calculated: {final_impacts}")

    print(f"[{time.strftime('%H:%M:%S')}] [Main] Assembling final JSON report...")

    s1_data = (final_ages[0], final_uc[0], final_impacts[0], final_sits[0])
    s2_data = (final_ages[1], final_uc[1], final_impacts[1], final_sits[1])
    s3_data = (final_ages[2], final_uc[2], final_impacts[2], final_sits[2])
    s4_data = (final_ages[3], final_uc[3], final_impacts[3], final_sits[3])

    report_dict = jsondata.get_all_seats_dict(s1_data, s2_data, s3_data, s4_data)

    print(f"\n[{time.strftime('%H:%M:%S')}] [Main] --- FINAL ACCIDENT REPORT ---")
    print(json.dumps(report_dict, indent=4))

    accident_id = None
    try:
        print(f"[{time.strftime('%H:%M:%S')}] [Main] Sending JSON report to {SERVER_BASE_URL}...")
        resp = requests.post(
            f"{SERVER_BASE_URL}/api/accident_trigger",
            json=report_dict,
            timeout=10
        )

        if resp.status_code == 200:
            response_data = resp.json()
            accident_id = response_data.get('id')
            if accident_id:
                print(f"[{time.strftime('%H:%M:%S')}] [Main] Server ACCEPTED report. Accident ID: {accident_id}")
            else:
                print(f"[{time.strftime('%H:%M:%S')}] [Main] ERROR: Server responded OK (200) but did not return an 'id'. Response: {response_data}")
        else:
            print(f"[{time.strftime('%H:%M:%S')}] [Main] ERROR: Server returned status code {resp.status_code}")
            print(f"[{time.strftime('%H:%M:%S')}] [Main] Server Response Text: {resp.text}")

    except requests.exceptions.Timeout:
        print(f"[{time.strftime('%H:%M:%S')}] [Main] CRITICAL: Connection to server timed out after 10 seconds.")
    except requests.exceptions.RequestException as e:
        print(f"[{time.strftime('%H:%M:%S')}] [Main] CRITICAL: Failed to send JSON report. Error: {e}")

    if accident_id:
        print(f"[{time.strftime('%H:%M:%S')}] [Main] Capturing and uploading incident photo for ID: {accident_id}...")
        # Call the function from the imported capture module
        upload_success = capture.capture_and_upload(accident_id, SERVER_BASE_URL)
        if upload_success:
            print(f"[{time.strftime('%H:%M:%S')}] [Main] Photo upload successful.")
        else:
            print(f"[{time.strftime('%H:%M:%S')}] [Main] ERROR: Photo upload failed. Check capture.py logs and server status.")
    else:
        print(f"[{time.strftime('%H:%M:%S')}] [Main] Skipping photo upload because no valid accident_id was received from the server.")

    print(f"\n[{time.strftime('%H:%M:%S')}] [Main] --- Processing Complete ---")

if __name__ == "__main__":
    print("="*50)
    print("INFO: Server communication is ENABLED.")
    print(f"INFO: Attempting to send data to {SERVER_BASE_URL}")
    if SERVER_BASE_URL == "http://127.0.0.1:5000":
        print("WARNING: SERVER_BASE_URL is localhost. Ensure server is running locally or change the URL.")
    print("INFO: Age/Seat check runs only ONCE after user prompt.")
    print("INFO: Weight calibration will occur first.")
    print("="*50)
    time.sleep(3)

    main()