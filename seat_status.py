# -*- coding: utf-8 -*-
"""seat_status

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Pgn_IvTGe6JNCxDD1dbAagpH6nfTfG0X
"""

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
seat_status.py

Description:
- [MODIFIED] This module now provides a single utility function `get_seat_status`.
- It no longer runs a loop, reads files, or calls age.py.
- The main.py script is responsible for calling this function with the required data.
- Logic: S#_sit = 1 if Weight > THRESHOLD AND (Age is 0 OR 1), otherwise 0.
"""

import json
import time
from pathlib import Path
from datetime import datetime, timezone
from typing import Tuple, Dict, Any

# Import the get_arduino_data module to get data from memory
# This is now the *only* source of data.
try:
    import get_arduino_data
except ImportError:
    print("Error: Could not import get_arduino_data.py.")
    # Define dummy functions if import fails, so testing block can run
    def get_latest_seat_data(): return {}

# --- Settings ---
WEIGHT_THRESHOLD_KG = 5.0
SEATS = ["S1", "S2", "S3", "S4"]

# --- Utility Functions ---
def safe_float(x, default=0.0):
    """Safely converts a value to float, returning default on failure."""
    try:
        return float(x)
    except Exception:
        return default

def normalize_age_code(x):
    """Ensures age code is 0, 1, or 2 (defaulting to 2 'unknown')."""
    try:
        if x is None:
            return 2
        xi = int(x)
        if xi in (0, 1, 2):
            return xi
        return 2 # Default to unknown if value is invalid (e.g., 3)
    except Exception:
        return 2 # Default to unknown on parse error

# --- [NEW] Main Function (to be imported by main.py) ---
def get_seat_status(age_tuple: Tuple[int, int, int, int],
                      seats_data_dict: Dict[str, Dict[str, Any]]) -> Tuple[int, int, int, int]:
    """
    Calculates the sitting status for all seats based on age and weight.

    Args:
        age_tuple (Tuple): (S1_age, S2_age, S3_age, S4_age) codes (0, 1, or 2).
        seats_data_dict (Dict): The full data dictionary from
                                get_arduino_data.get_latest_seat_data().

    Returns:
        Tuple[int, int, int, int]: (S1_sit, S2_sit, S3_sit, S4_sit) codes (0 or 1).
    """

    # 1. Normalize age data
    age_codes = {
        "S1": normalize_age_code(age_tuple[0]),
        "S2": normalize_age_code(age_tuple[1]),
        "S3": normalize_age_code(age_tuple[2]),
        "S4": normalize_age_code(age_tuple[3]),
    }

    # 2. Process weight data and apply logic
    sit_status_map = {}
    for seat in SEATS:
        # Get weight from the provided dictionary
        weight = 0.0
        try:
            # Safely get weight
            weight = safe_float(seats_data_dict.get(seat, {}).get("Weight", 0.0), default=0.0)
        except Exception:
            weight = 0.0

        age_code = age_codes.get(seat, 2)  # 0, 1, or 2

        sit_status = 0
        # Sitting condition: Weight > Threshold AND (Age is 0=Adult OR 1=Child)
        if (weight > WEIGHT_THRESHOLD_KG) and (age_code == 0 or age_code == 1):
            sit_status = 1

        sit_status_map[seat] = sit_status

    # 3. Return tuple in the correct order
    return (
        sit_status_map.get("S1", 0),
        sit_status_map.get("S2", 0),
        sit_status_map.get("S3", 0),
        sit_status_map.get("S4", 0)
    )

# --- [MODIFIED] Test block ---
if __name__ == "__main__":
    print("Running seat_status.py directly (Test Mode)")

    # 1. Create mock age data
    # (S1=Child, S2=Adult, S3=Empty, S4=Unknown)
    mock_ages = (1, 0, 2, 2)

    # 2. Create mock weight data (as if from get_arduino_data)
    # (S1=15kg, S2=60kg, S3=1kg, S4=20kg)
    mock_weights = {
        "S1": {"Weight": 15.0, "mpu_g": 0.1},
        "S2": {"Weight": 60.0, "mpu_g": 0.1},
        "S3": {"Weight": 1.0, "mpu_g": 0.1},
        "S4": {"Weight": 20.0, "mpu_g": 0.1},
    }

    print(f"Mock Ages (S1-S4): {mock_ages}")
    print(f"Mock Weights (S1-S4): {[mock_weights.get(s, {}).get('Weight') for s in SEATS]}")

    # 3. Call the function
    s1_sit, s2_sit, s3_sit, s4_sit = get_seat_status(mock_ages, mock_weights)

    # 4. Check results
    # S1: 15kg > 5kg AND age=1 (Child) -> Sit = 1
    # S2: 60kg > 5kg AND age=0 (Adult) -> Sit = 1
    # S3: 1kg < 5kg AND age=2 (Empty) -> Sit = 0
    # S4: 20kg > 5kg BUT age=2 (Unknown) -> Sit = 0 (Age must be 0 or 1)
    print("\n--- Final Sit Status Results (0=Empty, 1=Sit) ---")
    print(f"S1_sit: {s1_sit} (Expected: 1)")
    print(f"S2_sit: {s2_sit} (Expected: 1)")
    print(f"S3_sit: {s3_sit} (Expected: 0)")
    print(f"S4_sit: {s4_sit} (Expected: 0)")